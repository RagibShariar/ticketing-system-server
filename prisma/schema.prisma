generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  name            String
  password        String
  companyName     String
  designation     String?
  phone           String?
  avatar          String?
  role            UserRole         @default(user)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  otpVerification OTPVerification?

  // One-to-many relationship with ServiceRequest
  serviceRequests ServiceRequest[] // A user can have multiple service requests

  @@map("users")
}

model OTPVerification {
  id        String   @id @default(uuid())
  otp       String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("otp_verifications")
}

model ServiceRequest {
  id        Int           @id @default(autoincrement())
  name      String
  email     String
  subject   String
  message   String
  image     String?
  createdAt DateTime      @default(now())
  status    RequestStatus @default(pending)

  // Foreign key to RequestType
  requestTypeId Int
  requestType   RequestType @relation(fields: [requestTypeId], references: [id])

  // Foreign key to User (Many-to-One relation)
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("service_requests")
}

model RequestType {
  id   Int             @id @default(autoincrement())
  type RequestTypeEnum

  // One-to-many relationship with ServiceRequest
  serviceRequests ServiceRequest[] // Each request type can have multiple service requests

  @@map("request_types")
}

enum UserRole {
  super_admin
  admin
  user
}

enum RequestStatus {
  pending
  in_progress
  fulfilled
  cancelled
}

enum RequestTypeEnum {
  incident
  request
  change
}
